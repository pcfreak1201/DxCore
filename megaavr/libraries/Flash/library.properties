name=Flash
version=1.5.7
author=Spence Konde
maintainer=Spence Konde <spencekonde@gmail.com>
sentence= (Dx-series ONLY) Write to flash from application! Does not require optiboot to be in use and on non-optiboot boards you can limit writes to a subsection of the flash.
paragraph=There isn't quite enough flash to fit the "standard" write-to-flash-from-application-via-optiboot trick. Here on the Dx-series parts, only the SPM or ST instruction itself needs to be executed from the bootloader section, and you kinda have to do the SPM (it's twice as fast, and ST improperly applies write protection on 128k DAs). If there's no optiboot, you can select options from the app SPM menu, this will generate a dummy bootloader section (no self programming is permitted if the size of the bootloader section is 0; 0 = all flash is bootloader section, and only external programming can write to bootloader section), and very early in boot, poke CPUINT and tell it to start the vectors from 0x0000 not the end of the "bootloader" (which is no such thing). If a limited flashwrite size was selected, theat area at the top of the flash is set to be the APPDATA section and then APPCODE can write to it without further ado.  If the unrestricted option is used, we place the same 2 instruction entry point into the first page of the flash (easier said than done) and call that just like we call the bootloader. No support for Ex-series, the NVMCTRL is drastcally different, and the tooling should be derived from optiboot_x not optiboot_dx, and the flash library for Ex would likewise be based on the tinyAVR one.
url=https://github.com/SpenceKonde/DxCore
architectures=megaavr
category=Data Storage
